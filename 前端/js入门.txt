js
	函数（function） 
		页面加载时不会立即执行，需要通过调用的时候来执行，用于封装操作过程
		function sum(num1, num2) {
			return num1 + num2; 
		}
		表现形式
			声明式：function XXX(){}
				function会函数提升，被JS解释器优先编译，声明与调用没有先后，可以在任何位置调用
				加上()则是会被编译器忽略
				function fn1(){}();
			函数表达式：var k = function(){}
				function不会函数提升，JS解释器逐行编译，声明必须要放在调用之前。
				加上()可以直接调用
				var fn2 = function(){}();
		DOM加载完毕之后执行
			$(function(){…});   
			jQuery(function($) {…});  
			$(document).ready(function(){…})
	事件
		触发函数的开关
		<body>
			<script>
				function displayDate(){
					document.getElementById("demo").innerHTML=Date();
				}
			</script>
			<p>点击绑定了onclick事件的按钮就可以执行 displayDate()</p>
			<button onclick="displayDate()">点击事件</button>
			<p id="demo"></p>
		</body>
	页面内置方法
		页面加载时立即执行，且只执行一次
		alert("xx")
	方法（method）
		通过对象调用的js函数，当将函数封装在对象中，函数（function）就变成了对象的方法（method）
	对象（object）
		变量的键值对容器
		对象里面可以封装函数，无法封装操作过程
		var person = {
			firstName:"zhang",
			lastName:"erga",
			fullName: function() {
				return this.firstName + " " + this.lastName;
			}
		}
	