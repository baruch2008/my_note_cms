### <select>标签自动将多条数据映射为list
  List<UserSsq> findAfterBuy(Integer param)
  <select id="findAfterBuy" parameterType="java.lang.Integer" resultType="UserSsq">
  注：不要误写成resultType=java.util.List 报错 Error querying database.  Cause: java.lang.UnsupportedOperationException

错误写法：Integer getCaseExeResultNumByItemUris(List<String> itemUris, String lastResult);
Integer getCaseExeResultNumByItemUris(@Param("list") List<String> itemUris, String lastResult);org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.binding.BindingException: Parameter 'list' not found. Available parameters are [arg1, arg0, param1, param2]
	<foreach collection="list" item="itemUri" index="index" open="(" close=")" separator=",">
		#{itemUri}
	</foreach>
正确写法：Integer getCaseExeResultNumByItemUris(@Param("list") List<String> itemUris, String lastResult);

错误写法：<select="xx" >
报错A query was run and no Result Maps were found for the Mapped Statement 'com.xx.xx.xxMapper.getxx'.  
It's likely that neither a Result Type nor a Result Map was specified.
正确写法：<select="xx" resultType="Integer">


### mapper文件报错：不允许有匹配 "[xX][mM][lL]" 的处理指令目标
一个mapper中出现多个头信息导致，一般是mapper.xml解决冲突的时候留下的

### #{}和${}区别
1. #将传入的数据都当成一个字符串，会对自动传入的数据加一个双引号。如：order by #user_id#，如果传入的值是111,那么解析成sql时的值为order by "111", 如果传入的值是id，则解析成的sql为order by "id".
2. $将传入的数据直接显示生成在sql中。如：order by $user_id$，如果传入的值是111,那么解析成sql时的值为order by user_id,  如果传入的值是id，则解析成的sql为order by id.
5.$方式一般用于传入数据库对象，例如传入表名.

### <foreach>标签
index属性：当前集合遍历次数的计数器，可以用于在插入数据时的自增值的定义

### <choose>标签
when标签不支持别名，判断与字符串是否相等要用“==”——》<when test="param2 == 'group'">

### mybatis大于小于符号写法
#### 第一种写法（1）：
  原符号       <        <=      >       >=       &        '        "
  替换符号    &lt;    &lt;=   &gt;    &gt;=   &amp;   &apos;  &quot;
  例如：sql如下：
  create_date_time &gt;= #{startTime} and  create_date_time &lt;= #{endTime}
#### 第二种写法（2）：
  大于等于
  <![CDATA[ >= ]]>
  小于等于
  <![CDATA[ <= ]]>
  
### 按条件过滤查询解决方案（支持页面传入正则表达式、单/复选框、时间段）
前台获取可过滤字段table_header_field
按用户保存过滤信息filter_condition_group
<foreach collection="param3" item="filterCondition">
    <if test="filterCondition.type == 'Text'">
        and ${filterCondition.fieldName} REGEXP
        #{filterCondition.value}
    </if>
    <if test="filterCondition.type == 'Checked' or filterCondition.type == 'Select'">
        and ${filterCondition.fieldName} in
        <foreach collection="filterCondition.selectFieldValues"
                 item="fieldValue" index="index" open="(" close=")" separator=",">
            #{fieldValue.value}
        </foreach>
    </if>
    <if test="filterCondition.type == 'Date'">
        <if test="filterCondition.dateFieldValue.startTime != '--'">
            and ${filterCondition.fieldName} &gt;=
            #{filterCondition.dateFieldValue.startTime}
        </if>
        <if test="filterCondition.dateFieldValue.endTime != '--'">
            and ${filterCondition.fieldName} &lt;=
            #{filterCondition.dateFieldValue.endTime}
        </if>
    </if>
</foreach>
