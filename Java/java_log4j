# 多项目动态设置日志文件 http://www.blogjava.net/stone2083/archive/2010/07/01/324935.html
## shell脚本配置(log4j支持占位符)
java -DlogPath=logPath -DlogFileName=logFileName -jar /service.jar --spring.profiles.active=pro
## log4j.xml配置
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE log4j:configuration SYSTEM "log4j.dtd">

<log4j:configuration>
    <!-- Appender配置 -->
    <appender name="ConsoleAppender" class="org.apache.log4j.ConsoleAppender">
        <layout class="org.apache.log4j.PatternLayout">
            <param name="ConversionPattern" value="[%d{yyyy-MM-dd HH:mm:ss,SSS}] [%-5p] [%l-(%t)] %m%n"/>
        </layout>
        <filter class="org.apache.log4j.varia.LevelRangeFilter">
            <param name="levelMin" value="DEBUG"/>
            <param name="levelMax" value="FATAL"/>
            <param name="AcceptOnMatch" value="true"/>
        </filter>
    </appender>

    <appender name="RollingFileAppender" class="org.apache.log4j.RollingFileAppender">
        <param name="File" value="${logPath}/${logFileName}.log"/>
        <param name="Append" value="true"/>
        <param name="MaxBackupIndex" value="20"/>
        <param name="MaxFileSize" value="50MB"/>
        <layout class="org.apache.log4j.PatternLayout">
            <param name="ConversionPattern" value="[%d{yyyy-MM-dd HH:mm:ss,SSS}] [%-5p] [%l-(%t)] %m%n"/>
        </layout>
    </appender>

    <!-- 用于单独记录消息模块的日志输出 -->
    <appender name="RollingFileAppender-mq" class="org.apache.log4j.RollingFileAppender">
        <param name="File" value="${logPath}/${logFileName}-mq.log"/>
        <param name="Append" value="true"/>
        <param name="MaxBackupIndex" value="5"/>
        <param name="MaxFileSize" value="20MB"/>
        <layout class="org.apache.log4j.PatternLayout">
            <param name="ConversionPattern" value="[%d{yyyy-MM-dd HH:mm:ss,SSS}] [%-5p] [%l-(%t)] %m%n"/>
        </layout>
    </appender>
    <!-- 公共logger配置 -->
    <logger name="com.arks.cvm" additivity="false">
        <level value="WARN"/>
        <appender-ref ref="ConsoleAppender"/>
        <appender-ref ref="RollingFileAppender"/>
    </logger>

    <logger name="com.arks.cvm.mq" additivity="false">
        <level value="DEBUG"/>
        <appender-ref ref="ConsoleAppender"/>
        <appender-ref ref="RollingFileAppender-mq"/>
    </logger>
    <!-- 基础logger配置 -->
    <root>
        <level value="INFO"/>
        <appender-ref ref="ConsoleAppender"/>
        <appender-ref ref="RollingFileAppender"/>
    </root>

</log4j:configuration>

catch exception时要打印堆栈，不要忽视日志的作用，在定位现网问题时日志是救命的，下面是对日志制定一些规范。
1.使用org.slf4j包下的logger，可以以参数的形式进行打印，不用拼装字符串。例如logger.info("insert {}/{} failed",param1,param2);
2.一次操作会多次经过的位置使用debug，只会经过一次的关键逻辑调用打印info级别日志
3.服务启动或者停止的流程使用warn级别
4.程序出现不可预期的结果时使用warn级别
5.出现Exception时使用error级别日志，并且要打印堆栈不能只打印message
