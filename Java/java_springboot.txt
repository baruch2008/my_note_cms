服务间通讯注解@FeignClient
    易错
        FeignClient中不加url属性，默认调用同一个注册中心的服务
        使用FeignClient调用三方get型接口，要在请求参数前加上@RequestParam注解修饰，否则报错Method has too many Body parameters，Controller里面可以不加该注解修饰。
    设置token信息
        配置FeignClient注解
        @Configuration
        public class FeignClientConfiguration
        {
            @Value("${token.key}")
            private String tokenKey;

            @Value("${token.value}")
            private String tokenValue;

            @Bean
            public RequestInterceptor headerInterceptor()
            {
                return new RequestInterceptor()
                {
                    @Override
                    public void apply(RequestTemplate requestTemplate)
                    {
                        List<String> authorizationList = Lists.newArrayList(tokenValue);
                        List<String> contentTypeList = Lists.newArrayList("application/json");
                        Map<String, Collection<String>> headers = ImmutableMap.of(tokenKey, authorizationList,
                                "Content-Type", contentTypeList);
                        requestTemplate.headers(headers);
                    }
                };
            }
        }
        读取配置
        @FeignClient(name = "xx-service", url = "${xx.xx.xx}", configuration = FeignClientConfiguration.class)

接口接收cookie中的参数
    @CookieValue(value="xx")

扫描包注解
    @ComponentScan(basePackages = { "com.xx.xx.xx.service"..})

eureka注册中心配置
    eureka:
      client:
        serviceUrl:
          defaultZone: http://localhost:8761/eureka/
      instance:
        // 随机分配注册ip与端口（eureka服务与子服务位于同一台宿主机时，会按照宿主机的IP进行分配。不再同一台则会分配172内网IP）
        preferIpAddress: true 
        instance-id: ${spring.cloud.client.ipAddress}:${server.port}
        // 自行设置注册ip与端口（与preferIpAddress混用会导致服务注册IP为随机分配，而实际访问IP为自行设置，出现网关服务轮询异常、服务之间互相访问异常）
        instance-id: 192.168.1.xx:xxxx // 注册地址
        hostname: 192.168.1.xx // 实际访问地址
        non-secure-port: xxxx // 实际访问端口

启动类中加入跨域过滤器解决跨域问题
    过滤器
        @Component
        public class CorsFilter implements Filter {
            final static org.slf4j.Logger logger = org.slf4j.LoggerFactory.getLogger(CorsFilter.class);

            public void doFilter(ServletRequest req, ServletResponse res, FilterChain chain) throws IOException, ServletException {
                HttpServletResponse response = (HttpServletResponse) res;
                response.setHeader("Access-Control-Allow-Origin", "*");
                response.setHeader("Access-Control-Allow-Methods", "POST, GET, OPTIONS, DELETE");
                response.setHeader("Access-Control-Max-Age", "3600");
                response.setHeader("Access-Control-Allow-Headers", "x-requested-with");
                System.out.println("*********************************过滤器被使用**************************");
                chain.doFilter(req, res);
            }
            public void init(FilterConfig filterConfig) {}
            public void destroy() {}
        }
    启动类中引入
        private CorsConfiguration buildConfig()
        {
            CorsConfiguration corsConfiguration = new CorsConfiguration();
            corsConfiguration.addAllowedOrigin("*");
            corsConfiguration.addAllowedHeader("*");
            corsConfiguration.addAllowedMethod("*");
            return corsConfiguration;
        }

        /**
         * 过滤网址
         * @return CorsFilter x
         */
        @Bean
        public CorsFilter corsFilter()
        {
            UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();
            source.registerCorsConfiguration("/**", buildConfig()); // 4
            return new CorsFilter(source);
        }

eclipse debug启动springboot问题
    没有下断点，但以debug方式启动后都会在SilentExitExceptionHandler类中的throw new SilentExitException()处断开 
    解决办法
        window->preferences->java->debug 取消勾选 suspend execution on uncaught exceptions
